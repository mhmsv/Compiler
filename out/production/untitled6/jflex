//package Compiler;
//salam
//section 1

%%

//section 2

%public
%class lexic //name of the java class
%column // can retrieve current line using yycloumn()
%line // can retrieve current line using yyline()
%unicode //must thing
%type String

//$state Strings
 //state STRING declares a lexical state STRING that can be used in the lexical rules part of the specification

/* line 20 to 25 copied from ref manual https://github.com/jflex-de/jflex/blob/master/docs/md/example.md */

//comments:
TraditionalComment   = "/*" [^*] ~"*/" | "/*" "*"+ "/"
Comment = {TraditionalComment} | {EndOfLineComment} | {DocumentationComment}
// Comment can be the last line of the file, without line terminator.
EndOfLineComment     = "//" {InputCharacter}* {LineTerminator}?
DocumentationComment = "/**" {CommentContent} "*"+ "/"
CommentContent       = ( [^*] | \*+ [^/*] )*

//whitespase and new line

LineTerminator = \r|\n|\r\n
InputCharacter = [^\r\n]
WhiteSpace     = {LineTerminator} | [ \t\f]

//operators
operator=[\-\+\*\/\%]

//decimal
DecIntegerLiteral = 0 | [1-9][0-9]*

//alphabet
alphabet = [a-zA-z]

//id
identifier = {alphabet} ({alphabet} |{DecIntegerLiteral} | [_] )*
//string
string = "\"" [^\n\r\"]*  "\""
//boolean
Boolean = "true"|"false"

//double

dot = "."
//se halat double darim
Double1 = {DecIntegerLiteral}+ {dot}
Double2 = {dot} {DecIntegerLiteral}+
Double3 = {DecIntegerLiteral}+ {dot} {DecIntegerLiteral}+
DoubleNumber = ({Double1} | {Double2}  | {Double3})

//punctuations from internet
Punctuations = "<" | "<=" | ">" | ">=" | "=" | "==" | "!=" | "&&" | "||" | "!" | ";" | "," | "." | "[" | "]" | "(" | ")" | "{" | "}"

//java reserved keywords

/*
abstract	continue	for	new	switch
assert***	default	goto*	package	synchronized
boolean	do	if	private	this
break	double	implements	protected	throw
byte	else	import	public	throws
case	enum****	instanceof	return	transient
catch	extends	int	short	try
char	final	interface	static	void
class	finally	long	strictfp**	volatile
const*	float	native	super	while
*/

Reserved = "string"|"bool"|"null"|"NewArray"|"Print"|"ReadInteger"|"ReadLine"|"abstract" |	"continue" | "for" | "new" |"switch"| "assert***"|	"default"|	"goto*"|	"package"|	"synchronized" | "boolean" |	"do"	|"if"	|"private"|	"this"| "break"	|"double"	|"implements"|	"protected"|	"throw"| "byte"	| "else"	|"import"|	"public"|	"throws"| "case"|	"enum****"|	"instanceof"|	"return"|	"transient"| "catch"	|"extends"|	"int"|	"short"|	"try"| "char"|	"final"|	"interface"|	"static"|	"void"| "class"|	"finally"|	"long"|	"strictfp**"|	"volatile"| "const*"|	"float"|	"native"	|"super"	|"while"

%%
//section 3
<YYINITIAL> {

//comments
{Comment}                                         {/* comment */}

//keywords
{Reserved}                                        {return yytext();}

//boolean
{Boolean}                                         {return ("T_BOOLEANLITERAL" + " " + yytext());}

//identifiers
{identifier}                                      {return ("T_ID"+ " " + yytext());}

//double
{DoubleNumber}                                    {return ("T_DOUBLELITERAL" + " " + yytext());}

//white space
{WhiteSpace}                                      {/* white space */}



//operators
{operator}                                        {return yytext();}

//punctuations
{Punctuations}                                    {return yytext();}

{DecIntegerLiteral}                               {return ("T_INTLITERAL" + " " + yytext());}




{string}                                          {return ("T_STRINGLITERAL" + " " + yytext());}



}
